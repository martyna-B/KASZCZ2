library(quadprog)
install.packages("tseries")
library(tseries)
install.packages("tseries", dependencies = TRUE)
install.packages("tseries", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("tseries")
library(tseries)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
knitr::knit_engines$set(python = reticulate::eng_python)
knitr::opts_chunk$set(pythonreticulate = FALSE)
pvalue_normtest <- jarque.bera.test(py$residuals, "pnorm")$p.value
pvalue_normtest <- jarque.bera.test(py$residuals)$p.value
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
knitr::knit_engines$set(python = reticulate::eng_python)
knitr::opts_chunk$set(pythonreticulate = FALSE)
library(reticulate)
library(aTSA)
library(stats)
library(tseries)
reticulate::repl_python()
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from scipy import stats, optimize
from statsmodels.tsa.stattools import pacf
from statsmodels.tsa.arima.model import ARIMA
from IPython.display import display
import statsmodels.api as sm
sns.set_style("darkgrid")
sns.set_palette(["steelblue", "red"])
def autocovariance_estimator(data, h):
n = len(data)
h = np.abs(h)
new_first_data = data[h:]
new_second_data = data[:n-h]
mean_data = np.mean(data)
output = (1/n)*sum((new_first_data - mean_data)*(new_second_data - mean_data))
return output
def autocorrelation_estimator(data, h):
data = np.array(data)
autocovariance = autocovariance_estimator(data, h)
variance = autocovariance_estimator(data, 0)
return autocovariance/variance
weather_data = pd.read_csv("london_weather.csv")
max_temp_data = weather_data["max_temp"]
date_data = weather_data["date"]
correct_date = [pd.to_datetime(str(date), format='%Y%m%d') for date in date_data]
weather_data["correct_date"] = correct_date
plt.plot(correct_date, max_temp_data)
plt.xlabel("Czas")
plt.ylabel("Maksymalna temperatura")
date_data = date_data[:-365]
max_temp_data = max_temp_data[:-365]
correct_date = correct_date[:-365]
H_20 = np.arange(21)
autocorr_20 = [autocorrelation_estimator(max_temp_data, h) for h in H_20]
plt.plot(H_20, autocorr_20)
plt.xlabel("$h$")
plt.ylabel("ACF")
#to pewnie się usunie
H_1000 = np.arange(1001)
autocorr_1000 = [autocorrelation_estimator(max_temp_data, h) for h in H_1000]
plt.plot(H_1000, autocorr_1000)
plt.xlabel("$h$")
plt.ylabel("ACF")
PACF_20 = pacf(max_temp_data, nlags=20)
plt.plot(np.arange(21), PACF_20)
plt.xlabel("$h$")
plt.ylabel("PACF")
PACF_1000 = pacf(max_temp_data, nlags=1000)
plt.plot(np.arange(1001), PACF_1000)
plt.xlabel("$h$")
plt.ylabel("PACF")
line_fit = np.polyfit(np.arange(len(correct_date)), max_temp_data, 1)
quit
line_fit <- py$line_fit
reticulate::repl_python()
plt.plot(correct_date, max_temp_data, label = "Dane")
plt.plot(correct_date, np.polyval(line_fit, np.arange(len(correct_date))), label = "Dopasowana prosta")
plt.xlabel("Czas")
plt.ylabel("Maksymalna temperatura")
plt.legend()
temp_without_trend = max_temp_data - np.polyval(line_fit, np.arange(len(correct_date)))
plt.plot(correct_date, temp_without_trend)
plt.xlabel("Czas")
plt.ylabel("Maksymalna temperatura")
def my_sin(x, T, amplitude, phase):
return np.sin(x * 2 * np.pi /T + phase) * amplitude
sin_fit = optimize.curve_fit(my_sin, np.arange(len(correct_date)), temp_without_trend, p0 = [365, 20, 0])[0]
quit
sin_fit <- py$sin_fit
reticulate::repl_python()
fitted_sin = my_sin(np.arange(len(correct_date)), *sin_fit)
plt.plot(correct_date, temp_without_trend, label = "Dane")
plt.plot(correct_date, fitted_sin, label = "Dopasowana funkcja okresowa")
plt.xlabel("Czas")
plt.ylabel("Maksymalna temperatura")
plt.legend()
temp_without_seasonality = temp_without_trend - fitted_sin
plt.plot(correct_date, temp_without_seasonality)
plt.xlabel("Czas")
plt.ylabel("Maksymalna temperatura")
autocorr_20_after = [autocorrelation_estimator(temp_without_seasonality, h) for h in H_20]
plt.plot(H_20, autocorr_20_after)
plt.xlabel("$h$")
plt.ylabel("ACF")
autocorr_1000_after = [autocorrelation_estimator(temp_without_seasonality, h) for h in H_1000]
plt.plot(H_1000, autocorr_1000_after)
plt.xlabel("$h$")
plt.ylabel("ACF")
PACF_20_after = pacf(temp_without_seasonality, nlags=20)
plt.plot(np.arange(21), PACF_20_after)
plt.xlabel("$h$")
plt.ylabel("PACF")
PACF_1000_after = pacf(temp_without_seasonality, nlags=1000)
plt.plot(np.arange(1001), PACF_1000_after)
plt.xlabel("$h$")
plt.ylabel("PACF")
pq_df = pd.read_csv("pq.csv")
#do zmiany na ładniejszą tabelę
display(pq_df)
phi, sigma = sm.regression.yule_walker(max_temp_data, order=6)
p = 6
q = 0
model = ARIMA(temp_without_seasonality, order = (p, 0, q)).fit(method = "yule_walker")
residuals = model.resid
quit
pvalue_ttest <- t.test(py$residuals)$p.value
reticulate::repl_python()
plt.scatter(np.arange(len(correct_date)), residuals, alpha = 0.3)
plt.axhline(0, color = "red")
plt.xlabel("Numer obserwacji")
plt.ylabel("Wartości resztowe")
quit
# DO ZMIANY
pvalue_wariancja <- t.test(py$residuals)$p.value
pvalue_ljungbox <- Box.test(py$residuals, lag = 1, type = "Ljung-Box", fitdf = 0)$p.value
reticulate::repl_python()
autocorr_residuals = [autocorrelation_estimator(residuals, h) for h in H_20]
plt.scatter(H_20, autocorr_residuals)
plt.xlabel("$h$")
plt.ylabel("ACF")
quit
pvalue_normtest <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest <- jarque.bera.test((py$residuals - mean(py$residuals))/sd(py$residuals))$p.value
pvalue_normtest <- jarque.bera.test((py$residuals - mean(py$residuals))/sd(py$residuals))$p.value
pvalue_normtest
pvalue_normtest <- jarque.bera.test((py$residuals - mean(py$residuals))/sd(py$residuals))$p.value
pvalue_normtest1 <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals)$p.value
pvalue_normtest1 <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm")$p.value
pvalue_normtest1 <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
x <- rnorm(100)
jarque.bera.test(x)
x <- rnorm(100, 5, 3)
jarque.bera.test(x)
jarque.bera.test(x)
x <- rnorm(100, 5, 3)
jarque.bera.test(x)
jarque.bera.test((x-mean(x))/sd(x))
ks.test(x, "pnorm")
ks.test(x, "pnorm", 5, 3)
ks.test(x, "pnorm", mean(x), sd(x))
ks.test(x, "pnorm", mean(x), var(x))
ks.test(x, "pnorm", mean(x), sd(x))
x <- rnorm(10000, 5, 3)
ks.test(x, "pnorm", mean(x), sd(x))
ks.test(x, "pnorm", mean(x), sd(x))
pvalue_normtest1 <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest1 <- jarque.bera.test(py$residuals, mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest1 <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest1 <- jarque.bera.test((py$residuals-mean(py$residuals))/sd(py$residuals))$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest1 <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest3 <- lillie.test(py$residuals)$p.value
library(reticulate)
library(aTSA)
library(stats)
library(tseries)
library(nortest)
pvalue_normtest <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest3 <- lillie.test(py$residuals)$p.value
pvalue_normtest <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest3 <- lillie.test(py$residuals, mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest3 <- lillie.test((py$residuals - mean(py$residuals))/sd(py$residuals))$p.value
pvalue_normtest <- jarque.bera.test(py$residuals)$p.value
pvalue_normtest2 <- ks.test(py$residuals, "pnorm", mean(py$residuals), sd(py$residuals))$p.value
pvalue_normtest3 <- lillie.test(py$residuals)$p.value
reticulate::repl_python()
# DO ZMIANY
pvalue_wariancja = het_arch(residuals)
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from scipy import stats, optimize
from statsmodels.tsa.stattools import pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.stats.diagnostic import het_arch
from IPython.display import display
import statsmodels.api as sm
sns.set_style("darkgrid")
sns.set_palette(["steelblue", "red"])
def autocovariance_estimator(data, h):
n = len(data)
h = np.abs(h)
new_first_data = data[h:]
new_second_data = data[:n-h]
mean_data = np.mean(data)
output = (1/n)*sum((new_first_data - mean_data)*(new_second_data - mean_data))
return output
def autocorrelation_estimator(data, h):
data = np.array(data)
autocovariance = autocovariance_estimator(data, h)
variance = autocovariance_estimator(data, 0)
return autocovariance/variance
# DO ZMIANY
pvalue_wariancja = het_arch(residuals)
# DO ZMIANY
pvalue_wariancja = het_arch(residuals)[1]
